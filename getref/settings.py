"""
Django settings for getref project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import mimetypes
 
mimetypes.add_type("text/javascript", ".js' %}", True)
 
import os
from pathlib import Path
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent
 


#!pip install python-dotenv
#from dotenv import load_dotenv

#load_dotenv()  # take environment variables from .env.
 
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

from decouple import config

# Now you can access your environment variables using os.getenv 

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY") #'j4t8b-htj3%e0vi!eazyysx%tch$w3#u=*@c$3njqc9&!j!x9r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG") # True #

# Stripe configuration 
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
STRIPE_CHARGE = config('STRIPE_CHARGE')
STRIPE_VERSION = config('STRIPE_VERSION')

# This is only required when using webhooks
STRIPE_ENDPOINT_SECRET = config('STRIPE_ENDPOINT_SECRET')

OAUTH2_CLIENT_ID=config('OAUTH2_CLIENT_ID')
OAUTH2_CLIENT_SECRET=config('OAUTH2_CLIENT_SECRET')


#ALLOWED_HOSTS = ['*'] #["127.0.0.1", "localhost"]
ALLOWED_HOSTS = ["getcall.pythonanywhere.com", "127.0.0.1", "localhost"]

 
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx',
                      'jfif', 'html', 'xml', 'pptx', 'drawio', 'fbx', 'obj', 'ply', 'mp3', 'mp4', 'wav'}


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


# Application definition
INSTALLED_APPS = [   
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', 
    'dashboard',
    'affiliate',
    'referral',
    #'subscriptions',
    'health_check',                             # the default health check
    'health_check.db',                          # stock Django health checkers
    'health_check.cache',                       # required if you use cache
    'health_check.storage',                     # required if you use storage
    'health_check.contrib.migrations',          # required if you use database migrations
    'oauth2_provider',
    'rest_framework',
    'corsheaders', 
    'drf_yasg',
    "accounts",  # Django users
    'social_django', 
    # Local
    'payments.apps.PaymentsConfig', # new 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # ... custom middleware ...
    'affiliate.middleware.affiliate_cookie_middleware.AffiliateCookieMiddleware',
    'referral.middleware.referral_audit_middleware.ReferralAuditMiddleware'
]

CORS_ALLOW_ALL_ORIGINS = True  # Allows requests from all origins

CORS_ALLOWED_ORIGINS = [
    'https://getcall.pythonanywhere.com',
    'http://localhost:3000',  # Add your frontend's URL
    'http://0.0.0.0:8000'
]

ROOT_URLCONF = 'getref.urls'

APPEND_SLASH=False


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'getref.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

MAX_CONN_AGE = 600

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
 
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.google.GoogleOAuth2',

    'django.contrib.auth.backends.ModelBackend',
)


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
 

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'

UPLOAD_ROOT = os.path.join(MEDIA_ROOT, 'uploads') 

#STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"  # new
# Enable WhiteNoise's GZip compression of static assets.
#STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
 


#LOGIN_URL = '/admin/login/'
LOGIN_URL = '/login/'
LOGOUT_URL = '/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# social auth configs for github
SOCIAL_AUTH_GITHUB_KEY = str(config('GITHUB_KEY', ""))
SOCIAL_AUTH_GITHUB_SECRET = str(config('GITHUB_SECRET', ""))

# social auth configs for google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = str(config('GOOGLE_KEY', ""))
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = str(config('GOOGLE_SECRET', ""))
"""
# email configs
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = str(config('EMAIL_USER', ""))
EMAIL_HOST_PASSWORD = str(config('EMAIL_PASSWORD', ""))

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30
"""
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
"""
if not DEBUG:
    # Security settings 
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    CSRF_TRUSTED_ORIGINS = [
        'getcall.pythonanywhere.com',
    ]

    # Aggiungere automaticamente lo schema a ogni dominio
    CSRF_TRUSTED_ORIGINS = [f'https://{origin}' for origin in CSRF_TRUSTED_ORIGINS]
"""
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 36000, 
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Basic': {
                'type': 'basic'
        },
        'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header'
        },
        'Get Call API - Swagger': {
            'type': 'oauth2',
            'authorizationUrl': '/getref/o/authorize',
            'tokenUrl': '/getref/o/token/',
            'flow': 'accessCode',
            'scopes': {
                'read groups': 'read groups',
            }
        }
    },
    'OAUTH2_REDIRECT_URL': 'http://localhost/static/drf-yasg/swagger-ui-dist/oauth2-redirect.html',
    'OAUTH2_CONFIG': {
        'clientId':  'GetCallClientId',
        'clientSecret': 'GetCallClientSecret',
        'appName': 'GetCall'

    },
}

REDOC_SETTINGS = {
   'LAZY_RENDERING': False 
}